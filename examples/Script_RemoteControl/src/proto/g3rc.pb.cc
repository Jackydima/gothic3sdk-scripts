// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: g3rc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "g3rc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace g3rc {

void protobuf_ShutdownFile_g3rc_2eproto() {
  delete RequestContainer::default_instance_;
  delete ResponseContainer::default_instance_;
  delete HearbeatRequest::default_instance_;
  delete EntityRequest::default_instance_;
  delete GotoRequest::default_instance_;
  delete SpawnRequest::default_instance_;
  delete PropertyRequest::default_instance_;
  delete HearbeatResponse::default_instance_;
  delete VoidResponse::default_instance_;
  delete EntityResponse::default_instance_;
  delete PropertyResponse::default_instance_;
  delete Position::default_instance_;
  delete Vector::default_instance_;
  delete EulerAngles::default_instance_;
  delete PropertyIdentifier::default_instance_;
  delete PropertySerialized::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_g3rc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_g3rc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RequestContainer::default_instance_ = new RequestContainer();
  ResponseContainer::default_instance_ = new ResponseContainer();
  HearbeatRequest::default_instance_ = new HearbeatRequest();
  EntityRequest::default_instance_ = new EntityRequest();
  GotoRequest::default_instance_ = new GotoRequest();
  SpawnRequest::default_instance_ = new SpawnRequest();
  PropertyRequest::default_instance_ = new PropertyRequest();
  HearbeatResponse::default_instance_ = new HearbeatResponse();
  VoidResponse::default_instance_ = new VoidResponse();
  EntityResponse::default_instance_ = new EntityResponse();
  PropertyResponse::default_instance_ = new PropertyResponse();
  Position::default_instance_ = new Position();
  Vector::default_instance_ = new Vector();
  EulerAngles::default_instance_ = new EulerAngles();
  PropertyIdentifier::default_instance_ = new PropertyIdentifier();
  PropertySerialized::default_instance_ = new PropertySerialized();
  RequestContainer::default_instance_->InitAsDefaultInstance();
  ResponseContainer::default_instance_->InitAsDefaultInstance();
  HearbeatRequest::default_instance_->InitAsDefaultInstance();
  EntityRequest::default_instance_->InitAsDefaultInstance();
  GotoRequest::default_instance_->InitAsDefaultInstance();
  SpawnRequest::default_instance_->InitAsDefaultInstance();
  PropertyRequest::default_instance_->InitAsDefaultInstance();
  HearbeatResponse::default_instance_->InitAsDefaultInstance();
  VoidResponse::default_instance_->InitAsDefaultInstance();
  EntityResponse::default_instance_->InitAsDefaultInstance();
  PropertyResponse::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  EulerAngles::default_instance_->InitAsDefaultInstance();
  PropertyIdentifier::default_instance_->InitAsDefaultInstance();
  PropertySerialized::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_g3rc_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_g3rc_2eproto_once_);
void protobuf_AddDesc_g3rc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_g3rc_2eproto_once_,
                 &protobuf_AddDesc_g3rc_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_g3rc_2eproto {
  StaticDescriptorInitializer_g3rc_2eproto() {
    protobuf_AddDesc_g3rc_2eproto();
  }
} static_descriptor_initializer_g3rc_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RequestContainer::kRequestNumberFieldNumber;
const int RequestContainer::kHeartbeatRequestFieldNumber;
const int RequestContainer::kEntityRequestFieldNumber;
const int RequestContainer::kGotoRequestFieldNumber;
const int RequestContainer::kSpawnRequestFieldNumber;
const int RequestContainer::kPropertyRequestFieldNumber;
#endif  // !_MSC_VER

RequestContainer::RequestContainer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.RequestContainer)
}

void RequestContainer::InitAsDefaultInstance() {
}

RequestContainer::RequestContainer(const RequestContainer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.RequestContainer)
}

void RequestContainer::SharedCtor() {
  _cached_size_ = 0;
  request_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_request();
}

RequestContainer::~RequestContainer() {
  // @@protoc_insertion_point(destructor:g3rc.RequestContainer)
  SharedDtor();
}

void RequestContainer::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestContainer& RequestContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

RequestContainer* RequestContainer::default_instance_ = NULL;

RequestContainer* RequestContainer::New() const {
  return new RequestContainer;
}

void RequestContainer::clear_request() {
  switch(request_case()) {
    case kHeartbeatRequest: {
      delete request_.heartbeat_request_;
      break;
    }
    case kEntityRequest: {
      delete request_.entity_request_;
      break;
    }
    case kGotoRequest: {
      delete request_.goto_request_;
      break;
    }
    case kSpawnRequest: {
      delete request_.spawn_request_;
      break;
    }
    case kPropertyRequest: {
      delete request_.property_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RequestContainer::Clear() {
  request_number_ = 0u;
  clear_request();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.RequestContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_number_)));
          set_has_request_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heartbeat_request;
        break;
      }

      // optional .g3rc.HearbeatRequest heartbeat_request = 2;
      case 2: {
        if (tag == 18) {
         parse_heartbeat_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entity_request;
        break;
      }

      // optional .g3rc.EntityRequest entity_request = 3;
      case 3: {
        if (tag == 26) {
         parse_entity_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goto_request;
        break;
      }

      // optional .g3rc.GotoRequest goto_request = 4;
      case 4: {
        if (tag == 34) {
         parse_goto_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goto_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_spawn_request;
        break;
      }

      // optional .g3rc.SpawnRequest spawn_request = 5;
      case 5: {
        if (tag == 42) {
         parse_spawn_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawn_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_property_request;
        break;
      }

      // optional .g3rc.PropertyRequest property_request = 6;
      case 6: {
        if (tag == 50) {
         parse_property_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.RequestContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.RequestContainer)
  return false;
#undef DO_
}

void RequestContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.RequestContainer)
  // required uint32 request_number = 1;
  if (has_request_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_number(), output);
  }

  // optional .g3rc.HearbeatRequest heartbeat_request = 2;
  if (has_heartbeat_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->heartbeat_request(), output);
  }

  // optional .g3rc.EntityRequest entity_request = 3;
  if (has_entity_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->entity_request(), output);
  }

  // optional .g3rc.GotoRequest goto_request = 4;
  if (has_goto_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->goto_request(), output);
  }

  // optional .g3rc.SpawnRequest spawn_request = 5;
  if (has_spawn_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->spawn_request(), output);
  }

  // optional .g3rc.PropertyRequest property_request = 6;
  if (has_property_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->property_request(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.RequestContainer)
}

int RequestContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_number = 1;
    if (has_request_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_number());
    }

  }
  switch (request_case()) {
    // optional .g3rc.HearbeatRequest heartbeat_request = 2;
    case kHeartbeatRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_request());
      break;
    }
    // optional .g3rc.EntityRequest entity_request = 3;
    case kEntityRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_request());
      break;
    }
    // optional .g3rc.GotoRequest goto_request = 4;
    case kGotoRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goto_request());
      break;
    }
    // optional .g3rc.SpawnRequest spawn_request = 5;
    case kSpawnRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawn_request());
      break;
    }
    // optional .g3rc.PropertyRequest property_request = 6;
    case kPropertyRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestContainer*>(&from));
}

void RequestContainer::MergeFrom(const RequestContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.request_case()) {
    case kHeartbeatRequest: {
      mutable_heartbeat_request()->::g3rc::HearbeatRequest::MergeFrom(from.heartbeat_request());
      break;
    }
    case kEntityRequest: {
      mutable_entity_request()->::g3rc::EntityRequest::MergeFrom(from.entity_request());
      break;
    }
    case kGotoRequest: {
      mutable_goto_request()->::g3rc::GotoRequest::MergeFrom(from.goto_request());
      break;
    }
    case kSpawnRequest: {
      mutable_spawn_request()->::g3rc::SpawnRequest::MergeFrom(from.spawn_request());
      break;
    }
    case kPropertyRequest: {
      mutable_property_request()->::g3rc::PropertyRequest::MergeFrom(from.property_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_number()) {
      set_request_number(from.request_number());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestContainer::CopyFrom(const RequestContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_entity_request()) {
    if (!this->entity_request().IsInitialized()) return false;
  }
  if (has_goto_request()) {
    if (!this->goto_request().IsInitialized()) return false;
  }
  if (has_spawn_request()) {
    if (!this->spawn_request().IsInitialized()) return false;
  }
  if (has_property_request()) {
    if (!this->property_request().IsInitialized()) return false;
  }
  return true;
}

void RequestContainer::Swap(RequestContainer* other) {
  if (other != this) {
    std::swap(request_number_, other->request_number_);
    std::swap(request_, other->request_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestContainer::GetTypeName() const {
  return "g3rc.RequestContainer";
}


// ===================================================================

bool ResponseContainer_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseContainer_Status ResponseContainer::FAILED;
const ResponseContainer_Status ResponseContainer::SUCCESSFUL;
const ResponseContainer_Status ResponseContainer::Status_MIN;
const ResponseContainer_Status ResponseContainer::Status_MAX;
const int ResponseContainer::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResponseContainer::kRequestNumberFieldNumber;
const int ResponseContainer::kStatusFieldNumber;
const int ResponseContainer::kMessageFieldNumber;
const int ResponseContainer::kHeartbeatResponseFieldNumber;
const int ResponseContainer::kEntityResponseFieldNumber;
const int ResponseContainer::kVoidResponseFieldNumber;
const int ResponseContainer::kPropertyResponseFieldNumber;
#endif  // !_MSC_VER

ResponseContainer::ResponseContainer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.ResponseContainer)
}

void ResponseContainer::InitAsDefaultInstance() {
}

ResponseContainer::ResponseContainer(const ResponseContainer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.ResponseContainer)
}

void ResponseContainer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_number_ = 0u;
  status_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_response();
}

ResponseContainer::~ResponseContainer() {
  // @@protoc_insertion_point(destructor:g3rc.ResponseContainer)
  SharedDtor();
}

void ResponseContainer::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (has_response()) {
    clear_response();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseContainer& ResponseContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

ResponseContainer* ResponseContainer::default_instance_ = NULL;

ResponseContainer* ResponseContainer::New() const {
  return new ResponseContainer;
}

void ResponseContainer::clear_response() {
  switch(response_case()) {
    case kHeartbeatResponse: {
      delete response_.heartbeat_response_;
      break;
    }
    case kEntityResponse: {
      delete response_.entity_response_;
      break;
    }
    case kVoidResponse: {
      delete response_.void_response_;
      break;
    }
    case kPropertyResponse: {
      delete response_.property_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ResponseContainer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseContainer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(request_number_, status_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_response();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ResponseContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.ResponseContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_number_)));
          set_has_request_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .g3rc.ResponseContainer.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::g3rc::ResponseContainer_Status_IsValid(value)) {
            set_status(static_cast< ::g3rc::ResponseContainer_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_heartbeat_response;
        break;
      }

      // optional .g3rc.HearbeatResponse heartbeat_response = 4;
      case 4: {
        if (tag == 34) {
         parse_heartbeat_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entity_response;
        break;
      }

      // optional .g3rc.EntityResponse entity_response = 5;
      case 5: {
        if (tag == 42) {
         parse_entity_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_void_response;
        break;
      }

      // optional .g3rc.VoidResponse void_response = 6;
      case 6: {
        if (tag == 50) {
         parse_void_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_void_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_property_response;
        break;
      }

      // optional .g3rc.PropertyResponse property_response = 7;
      case 7: {
        if (tag == 58) {
         parse_property_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.ResponseContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.ResponseContainer)
  return false;
#undef DO_
}

void ResponseContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.ResponseContainer)
  // required uint32 request_number = 1;
  if (has_request_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_number(), output);
  }

  // required .g3rc.ResponseContainer.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional .g3rc.HearbeatResponse heartbeat_response = 4;
  if (has_heartbeat_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->heartbeat_response(), output);
  }

  // optional .g3rc.EntityResponse entity_response = 5;
  if (has_entity_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->entity_response(), output);
  }

  // optional .g3rc.VoidResponse void_response = 6;
  if (has_void_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->void_response(), output);
  }

  // optional .g3rc.PropertyResponse property_response = 7;
  if (has_property_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->property_response(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.ResponseContainer)
}

int ResponseContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_number = 1;
    if (has_request_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_number());
    }

    // required .g3rc.ResponseContainer.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  switch (response_case()) {
    // optional .g3rc.HearbeatResponse heartbeat_response = 4;
    case kHeartbeatResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_response());
      break;
    }
    // optional .g3rc.EntityResponse entity_response = 5;
    case kEntityResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_response());
      break;
    }
    // optional .g3rc.VoidResponse void_response = 6;
    case kVoidResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->void_response());
      break;
    }
    // optional .g3rc.PropertyResponse property_response = 7;
    case kPropertyResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseContainer*>(&from));
}

void ResponseContainer::MergeFrom(const ResponseContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.response_case()) {
    case kHeartbeatResponse: {
      mutable_heartbeat_response()->::g3rc::HearbeatResponse::MergeFrom(from.heartbeat_response());
      break;
    }
    case kEntityResponse: {
      mutable_entity_response()->::g3rc::EntityResponse::MergeFrom(from.entity_response());
      break;
    }
    case kVoidResponse: {
      mutable_void_response()->::g3rc::VoidResponse::MergeFrom(from.void_response());
      break;
    }
    case kPropertyResponse: {
      mutable_property_response()->::g3rc::PropertyResponse::MergeFrom(from.property_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_number()) {
      set_request_number(from.request_number());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ResponseContainer::CopyFrom(const ResponseContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_heartbeat_response()) {
    if (!this->heartbeat_response().IsInitialized()) return false;
  }
  if (has_entity_response()) {
    if (!this->entity_response().IsInitialized()) return false;
  }
  if (has_property_response()) {
    if (!this->property_response().IsInitialized()) return false;
  }
  return true;
}

void ResponseContainer::Swap(ResponseContainer* other) {
  if (other != this) {
    std::swap(request_number_, other->request_number_);
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(response_, other->response_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseContainer::GetTypeName() const {
  return "g3rc.ResponseContainer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HearbeatRequest::HearbeatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.HearbeatRequest)
}

void HearbeatRequest::InitAsDefaultInstance() {
}

HearbeatRequest::HearbeatRequest(const HearbeatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.HearbeatRequest)
}

void HearbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HearbeatRequest::~HearbeatRequest() {
  // @@protoc_insertion_point(destructor:g3rc.HearbeatRequest)
  SharedDtor();
}

void HearbeatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HearbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HearbeatRequest& HearbeatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

HearbeatRequest* HearbeatRequest::default_instance_ = NULL;

HearbeatRequest* HearbeatRequest::New() const {
  return new HearbeatRequest;
}

void HearbeatRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HearbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.HearbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.HearbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.HearbeatRequest)
  return false;
#undef DO_
}

void HearbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.HearbeatRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.HearbeatRequest)
}

int HearbeatRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HearbeatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HearbeatRequest*>(&from));
}

void HearbeatRequest::MergeFrom(const HearbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HearbeatRequest::CopyFrom(const HearbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HearbeatRequest::IsInitialized() const {

  return true;
}

void HearbeatRequest::Swap(HearbeatRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HearbeatRequest::GetTypeName() const {
  return "g3rc.HearbeatRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EntityRequest::kNameFieldNumber;
const int EntityRequest::kGuidFieldNumber;
const int EntityRequest::kFocusFieldNumber;
const int EntityRequest::kEditorFieldNumber;
const int EntityRequest::kMovetoFieldNumber;
const int EntityRequest::kPutToGroundFieldNumber;
#endif  // !_MSC_VER

EntityRequest::EntityRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.EntityRequest)
}

void EntityRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  moveto_ = const_cast< ::g3rc::Position*>(
      ::g3rc::Position::internal_default_instance());
#else
  moveto_ = const_cast< ::g3rc::Position*>(&::g3rc::Position::default_instance());
#endif
}

EntityRequest::EntityRequest(const EntityRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.EntityRequest)
}

void EntityRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  moveto_ = NULL;
  put_to_ground_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_identifier();
}

EntityRequest::~EntityRequest() {
  // @@protoc_insertion_point(destructor:g3rc.EntityRequest)
  SharedDtor();
}

void EntityRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete moveto_;
  }
}

void EntityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntityRequest& EntityRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

EntityRequest* EntityRequest::default_instance_ = NULL;

EntityRequest* EntityRequest::New() const {
  return new EntityRequest;
}

void EntityRequest::clear_identifier() {
  switch(identifier_case()) {
    case kName: {
      delete identifier_.name_;
      break;
    }
    case kGuid: {
      delete identifier_.guid_;
      break;
    }
    case kFocus: {
      // No need to clear
      break;
    }
    case kEditor: {
      // No need to clear
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void EntityRequest::Clear() {
  if (_has_bits_[0 / 32] & 48) {
    if (has_moveto()) {
      if (moveto_ != NULL) moveto_->::g3rc::Position::Clear();
    }
    put_to_ground_ = false;
  }
  clear_identifier();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EntityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.EntityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (tag == 18) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_focus;
        break;
      }

      // optional bool focus = 3;
      case 3: {
        if (tag == 24) {
         parse_focus:
          clear_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &identifier_.focus_)));
          set_has_focus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_moveto;
        break;
      }

      // optional .g3rc.Position moveto = 4;
      case 4: {
        if (tag == 34) {
         parse_moveto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moveto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_put_to_ground;
        break;
      }

      // optional bool put_to_ground = 5;
      case 5: {
        if (tag == 40) {
         parse_put_to_ground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_to_ground_)));
          set_has_put_to_ground();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_editor;
        break;
      }

      // optional bool editor = 6;
      case 6: {
        if (tag == 48) {
         parse_editor:
          clear_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &identifier_.editor_)));
          set_has_editor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.EntityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.EntityRequest)
  return false;
#undef DO_
}

void EntityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.EntityRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional bool focus = 3;
  if (has_focus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->focus(), output);
  }

  // optional .g3rc.Position moveto = 4;
  if (has_moveto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->moveto(), output);
  }

  // optional bool put_to_ground = 5;
  if (has_put_to_ground()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->put_to_ground(), output);
  }

  // optional bool editor = 6;
  if (has_editor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->editor(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.EntityRequest)
}

int EntityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .g3rc.Position moveto = 4;
    if (has_moveto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moveto());
    }

    // optional bool put_to_ground = 5;
    if (has_put_to_ground()) {
      total_size += 1 + 1;
    }

  }
  switch (identifier_case()) {
    // optional string name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional string guid = 2;
    case kGuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
      break;
    }
    // optional bool focus = 3;
    case kFocus: {
      total_size += 1 + 1;
      break;
    }
    // optional bool editor = 6;
    case kEditor: {
      total_size += 1 + 1;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntityRequest*>(&from));
}

void EntityRequest::MergeFrom(const EntityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.identifier_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kGuid: {
      set_guid(from.guid());
      break;
    }
    case kFocus: {
      set_focus(from.focus());
      break;
    }
    case kEditor: {
      set_editor(from.editor());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_moveto()) {
      mutable_moveto()->::g3rc::Position::MergeFrom(from.moveto());
    }
    if (from.has_put_to_ground()) {
      set_put_to_ground(from.put_to_ground());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EntityRequest::CopyFrom(const EntityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRequest::IsInitialized() const {

  if (has_moveto()) {
    if (!this->moveto().IsInitialized()) return false;
  }
  return true;
}

void EntityRequest::Swap(EntityRequest* other) {
  if (other != this) {
    std::swap(moveto_, other->moveto_);
    std::swap(put_to_ground_, other->put_to_ground_);
    std::swap(identifier_, other->identifier_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntityRequest::GetTypeName() const {
  return "g3rc.EntityRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GotoRequest::kNameFieldNumber;
const int GotoRequest::kGuidFieldNumber;
const int GotoRequest::kPositionFieldNumber;
const int GotoRequest::kPutToGroundFieldNumber;
#endif  // !_MSC_VER

GotoRequest::GotoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.GotoRequest)
}

void GotoRequest::InitAsDefaultInstance() {
}

GotoRequest::GotoRequest(const GotoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.GotoRequest)
}

void GotoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  put_to_ground_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_identifier();
}

GotoRequest::~GotoRequest() {
  // @@protoc_insertion_point(destructor:g3rc.GotoRequest)
  SharedDtor();
}

void GotoRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GotoRequest& GotoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

GotoRequest* GotoRequest::default_instance_ = NULL;

GotoRequest* GotoRequest::New() const {
  return new GotoRequest;
}

void GotoRequest::clear_identifier() {
  switch(identifier_case()) {
    case kName: {
      delete identifier_.name_;
      break;
    }
    case kGuid: {
      delete identifier_.guid_;
      break;
    }
    case kPosition: {
      delete identifier_.position_;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void GotoRequest::Clear() {
  put_to_ground_ = false;
  clear_identifier();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.GotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (tag == 18) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .g3rc.Vector position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_put_to_ground;
        break;
      }

      // optional bool put_to_ground = 4;
      case 4: {
        if (tag == 32) {
         parse_put_to_ground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_to_ground_)));
          set_has_put_to_ground();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.GotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.GotoRequest)
  return false;
#undef DO_
}

void GotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.GotoRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional .g3rc.Vector position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->position(), output);
  }

  // optional bool put_to_ground = 4;
  if (has_put_to_ground()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->put_to_ground(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.GotoRequest)
}

int GotoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional bool put_to_ground = 4;
    if (has_put_to_ground()) {
      total_size += 1 + 1;
    }

  }
  switch (identifier_case()) {
    // optional string name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional string guid = 2;
    case kGuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
      break;
    }
    // optional .g3rc.Vector position = 3;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GotoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GotoRequest*>(&from));
}

void GotoRequest::MergeFrom(const GotoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.identifier_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kGuid: {
      set_guid(from.guid());
      break;
    }
    case kPosition: {
      mutable_position()->::g3rc::Vector::MergeFrom(from.position());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_put_to_ground()) {
      set_put_to_ground(from.put_to_ground());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GotoRequest::CopyFrom(const GotoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GotoRequest::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void GotoRequest::Swap(GotoRequest* other) {
  if (other != this) {
    std::swap(put_to_ground_, other->put_to_ground_);
    std::swap(identifier_, other->identifier_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GotoRequest::GetTypeName() const {
  return "g3rc.GotoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpawnRequest::kTemplateNameFieldNumber;
const int SpawnRequest::kTemplateGuidFieldNumber;
const int SpawnRequest::kEntityNameFieldNumber;
const int SpawnRequest::kEntityGuidFieldNumber;
const int SpawnRequest::kPositionFieldNumber;
#endif  // !_MSC_VER

SpawnRequest::SpawnRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.SpawnRequest)
}

void SpawnRequest::InitAsDefaultInstance() {
}

SpawnRequest::SpawnRequest(const SpawnRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.SpawnRequest)
}

void SpawnRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_identifier();
  clear_has_location();
}

SpawnRequest::~SpawnRequest() {
  // @@protoc_insertion_point(destructor:g3rc.SpawnRequest)
  SharedDtor();
}

void SpawnRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
  if (has_location()) {
    clear_location();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpawnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpawnRequest& SpawnRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

SpawnRequest* SpawnRequest::default_instance_ = NULL;

SpawnRequest* SpawnRequest::New() const {
  return new SpawnRequest;
}

void SpawnRequest::clear_identifier() {
  switch(identifier_case()) {
    case kTemplateName: {
      delete identifier_.template_name_;
      break;
    }
    case kTemplateGuid: {
      delete identifier_.template_guid_;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}

void SpawnRequest::clear_location() {
  switch(location_case()) {
    case kEntityName: {
      delete location_.entity_name_;
      break;
    }
    case kEntityGuid: {
      delete location_.entity_guid_;
      break;
    }
    case kPosition: {
      delete location_.position_;
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LOCATION_NOT_SET;
}


void SpawnRequest::Clear() {
  clear_identifier();
  clear_location();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpawnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.SpawnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string template_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template_guid;
        break;
      }

      // optional string template_guid = 2;
      case 2: {
        if (tag == 18) {
         parse_template_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entity_name;
        break;
      }

      // optional string entity_name = 3;
      case 3: {
        if (tag == 26) {
         parse_entity_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_entity_guid;
        break;
      }

      // optional string entity_guid = 4;
      case 4: {
        if (tag == 34) {
         parse_entity_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_position;
        break;
      }

      // optional .g3rc.Vector position = 5;
      case 5: {
        if (tag == 42) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.SpawnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.SpawnRequest)
  return false;
#undef DO_
}

void SpawnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.SpawnRequest)
  // optional string template_name = 1;
  if (has_template_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->template_name(), output);
  }

  // optional string template_guid = 2;
  if (has_template_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->template_guid(), output);
  }

  // optional string entity_name = 3;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->entity_name(), output);
  }

  // optional string entity_guid = 4;
  if (has_entity_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->entity_guid(), output);
  }

  // optional .g3rc.Vector position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->position(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.SpawnRequest)
}

int SpawnRequest::ByteSize() const {
  int total_size = 0;

  switch (identifier_case()) {
    // optional string template_name = 1;
    case kTemplateName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_name());
      break;
    }
    // optional string template_guid = 2;
    case kTemplateGuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_guid());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  switch (location_case()) {
    // optional string entity_name = 3;
    case kEntityName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_name());
      break;
    }
    // optional string entity_guid = 4;
    case kEntityGuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_guid());
      break;
    }
    // optional .g3rc.Vector position = 5;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpawnRequest*>(&from));
}

void SpawnRequest::MergeFrom(const SpawnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.identifier_case()) {
    case kTemplateName: {
      set_template_name(from.template_name());
      break;
    }
    case kTemplateGuid: {
      set_template_guid(from.template_guid());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.location_case()) {
    case kEntityName: {
      set_entity_name(from.entity_name());
      break;
    }
    case kEntityGuid: {
      set_entity_guid(from.entity_guid());
      break;
    }
    case kPosition: {
      mutable_position()->::g3rc::Vector::MergeFrom(from.position());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpawnRequest::CopyFrom(const SpawnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnRequest::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SpawnRequest::Swap(SpawnRequest* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(location_, other->location_);
    std::swap(_oneof_case_[1], other->_oneof_case_[1]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpawnRequest::GetTypeName() const {
  return "g3rc.SpawnRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRequest::kEntityNameFieldNumber;
const int PropertyRequest::kEntityGuidFieldNumber;
const int PropertyRequest::kPropertiesGetFieldNumber;
const int PropertyRequest::kPropertiesSetFieldNumber;
#endif  // !_MSC_VER

PropertyRequest::PropertyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.PropertyRequest)
}

void PropertyRequest::InitAsDefaultInstance() {
}

PropertyRequest::PropertyRequest(const PropertyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.PropertyRequest)
}

void PropertyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_identifier();
}

PropertyRequest::~PropertyRequest() {
  // @@protoc_insertion_point(destructor:g3rc.PropertyRequest)
  SharedDtor();
}

void PropertyRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropertyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyRequest& PropertyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

PropertyRequest* PropertyRequest::default_instance_ = NULL;

PropertyRequest* PropertyRequest::New() const {
  return new PropertyRequest;
}

void PropertyRequest::clear_identifier() {
  switch(identifier_case()) {
    case kEntityName: {
      delete identifier_.entity_name_;
      break;
    }
    case kEntityGuid: {
      delete identifier_.entity_guid_;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void PropertyRequest::Clear() {
  properties_get_.Clear();
  properties_set_.Clear();
  clear_identifier();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.PropertyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entity_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity_guid;
        break;
      }

      // optional string entity_guid = 2;
      case 2: {
        if (tag == 18) {
         parse_entity_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_properties_get;
        break;
      }

      // repeated .g3rc.PropertyIdentifier properties_get = 3;
      case 3: {
        if (tag == 26) {
         parse_properties_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_properties_get;
        if (input->ExpectTag(34)) goto parse_properties_set;
        break;
      }

      // repeated .g3rc.PropertySerialized properties_set = 4;
      case 4: {
        if (tag == 34) {
         parse_properties_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_properties_set;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.PropertyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.PropertyRequest)
  return false;
#undef DO_
}

void PropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.PropertyRequest)
  // optional string entity_name = 1;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_name(), output);
  }

  // optional string entity_guid = 2;
  if (has_entity_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_guid(), output);
  }

  // repeated .g3rc.PropertyIdentifier properties_get = 3;
  for (int i = 0; i < this->properties_get_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->properties_get(i), output);
  }

  // repeated .g3rc.PropertySerialized properties_set = 4;
  for (int i = 0; i < this->properties_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->properties_set(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.PropertyRequest)
}

int PropertyRequest::ByteSize() const {
  int total_size = 0;

  // repeated .g3rc.PropertyIdentifier properties_get = 3;
  total_size += 1 * this->properties_get_size();
  for (int i = 0; i < this->properties_get_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties_get(i));
  }

  // repeated .g3rc.PropertySerialized properties_set = 4;
  total_size += 1 * this->properties_set_size();
  for (int i = 0; i < this->properties_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties_set(i));
  }

  switch (identifier_case()) {
    // optional string entity_name = 1;
    case kEntityName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_name());
      break;
    }
    // optional string entity_guid = 2;
    case kEntityGuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_guid());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyRequest*>(&from));
}

void PropertyRequest::MergeFrom(const PropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_get_.MergeFrom(from.properties_get_);
  properties_set_.MergeFrom(from.properties_set_);
  switch (from.identifier_case()) {
    case kEntityName: {
      set_entity_name(from.entity_name());
      break;
    }
    case kEntityGuid: {
      set_entity_guid(from.entity_guid());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropertyRequest::CopyFrom(const PropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->properties_set())) return false;
  return true;
}

void PropertyRequest::Swap(PropertyRequest* other) {
  if (other != this) {
    properties_get_.Swap(&other->properties_get_);
    properties_set_.Swap(&other->properties_set_);
    std::swap(identifier_, other->identifier_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertyRequest::GetTypeName() const {
  return "g3rc.PropertyRequest";
}


// ===================================================================

bool HearbeatResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HearbeatResponse_Status HearbeatResponse::MENU;
const HearbeatResponse_Status HearbeatResponse::LOADING;
const HearbeatResponse_Status HearbeatResponse::INGAME;
const HearbeatResponse_Status HearbeatResponse::Status_MIN;
const HearbeatResponse_Status HearbeatResponse::Status_MAX;
const int HearbeatResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HearbeatResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

HearbeatResponse::HearbeatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.HearbeatResponse)
}

void HearbeatResponse::InitAsDefaultInstance() {
}

HearbeatResponse::HearbeatResponse(const HearbeatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.HearbeatResponse)
}

void HearbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HearbeatResponse::~HearbeatResponse() {
  // @@protoc_insertion_point(destructor:g3rc.HearbeatResponse)
  SharedDtor();
}

void HearbeatResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HearbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HearbeatResponse& HearbeatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

HearbeatResponse* HearbeatResponse::default_instance_ = NULL;

HearbeatResponse* HearbeatResponse::New() const {
  return new HearbeatResponse;
}

void HearbeatResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HearbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.HearbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .g3rc.HearbeatResponse.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::g3rc::HearbeatResponse_Status_IsValid(value)) {
            set_status(static_cast< ::g3rc::HearbeatResponse_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.HearbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.HearbeatResponse)
  return false;
#undef DO_
}

void HearbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.HearbeatResponse)
  // required .g3rc.HearbeatResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.HearbeatResponse)
}

int HearbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .g3rc.HearbeatResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HearbeatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HearbeatResponse*>(&from));
}

void HearbeatResponse::MergeFrom(const HearbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HearbeatResponse::CopyFrom(const HearbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HearbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HearbeatResponse::Swap(HearbeatResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HearbeatResponse::GetTypeName() const {
  return "g3rc.HearbeatResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VoidResponse::VoidResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.VoidResponse)
}

void VoidResponse::InitAsDefaultInstance() {
}

VoidResponse::VoidResponse(const VoidResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.VoidResponse)
}

void VoidResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoidResponse::~VoidResponse() {
  // @@protoc_insertion_point(destructor:g3rc.VoidResponse)
  SharedDtor();
}

void VoidResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VoidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VoidResponse& VoidResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

VoidResponse* VoidResponse::default_instance_ = NULL;

VoidResponse* VoidResponse::New() const {
  return new VoidResponse;
}

void VoidResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VoidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.VoidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.VoidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.VoidResponse)
  return false;
#undef DO_
}

void VoidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.VoidResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.VoidResponse)
}

int VoidResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoidResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoidResponse*>(&from));
}

void VoidResponse::MergeFrom(const VoidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VoidResponse::CopyFrom(const VoidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoidResponse::IsInitialized() const {

  return true;
}

void VoidResponse::Swap(VoidResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VoidResponse::GetTypeName() const {
  return "g3rc.VoidResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EntityResponse::kPositionFieldNumber;
const int EntityResponse::kNameFieldNumber;
const int EntityResponse::kGuidFieldNumber;
#endif  // !_MSC_VER

EntityResponse::EntityResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.EntityResponse)
}

void EntityResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::g3rc::Position*>(
      ::g3rc::Position::internal_default_instance());
#else
  position_ = const_cast< ::g3rc::Position*>(&::g3rc::Position::default_instance());
#endif
}

EntityResponse::EntityResponse(const EntityResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.EntityResponse)
}

void EntityResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityResponse::~EntityResponse() {
  // @@protoc_insertion_point(destructor:g3rc.EntityResponse)
  SharedDtor();
}

void EntityResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
  }
}

void EntityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntityResponse& EntityResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

EntityResponse* EntityResponse::default_instance_ = NULL;

EntityResponse* EntityResponse::New() const {
  return new EntityResponse;
}

void EntityResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_position()) {
      if (position_ != NULL) position_->::g3rc::Position::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EntityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.EntityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .g3rc.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // required string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.EntityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.EntityResponse)
  return false;
#undef DO_
}

void EntityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.EntityResponse)
  // required .g3rc.Position position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->position(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.EntityResponse)
}

int EntityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .g3rc.Position position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntityResponse*>(&from));
}

void EntityResponse::MergeFrom(const EntityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::g3rc::Position::MergeFrom(from.position());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EntityResponse::CopyFrom(const EntityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void EntityResponse::Swap(EntityResponse* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntityResponse::GetTypeName() const {
  return "g3rc.EntityResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyResponse::kPropertiesGetFieldNumber;
const int PropertyResponse::kPropertiesSetFieldNumber;
#endif  // !_MSC_VER

PropertyResponse::PropertyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.PropertyResponse)
}

void PropertyResponse::InitAsDefaultInstance() {
}

PropertyResponse::PropertyResponse(const PropertyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.PropertyResponse)
}

void PropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyResponse::~PropertyResponse() {
  // @@protoc_insertion_point(destructor:g3rc.PropertyResponse)
  SharedDtor();
}

void PropertyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropertyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyResponse& PropertyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

PropertyResponse* PropertyResponse::default_instance_ = NULL;

PropertyResponse* PropertyResponse::New() const {
  return new PropertyResponse;
}

void PropertyResponse::Clear() {
  properties_get_.Clear();
  properties_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.PropertyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .g3rc.PropertySerialized properties_get = 1;
      case 1: {
        if (tag == 10) {
         parse_properties_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_properties_get;
        if (input->ExpectTag(18)) goto parse_properties_set;
        break;
      }

      // repeated .g3rc.PropertySerialized properties_set = 2;
      case 2: {
        if (tag == 18) {
         parse_properties_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties_set;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.PropertyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.PropertyResponse)
  return false;
#undef DO_
}

void PropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.PropertyResponse)
  // repeated .g3rc.PropertySerialized properties_get = 1;
  for (int i = 0; i < this->properties_get_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->properties_get(i), output);
  }

  // repeated .g3rc.PropertySerialized properties_set = 2;
  for (int i = 0; i < this->properties_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->properties_set(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.PropertyResponse)
}

int PropertyResponse::ByteSize() const {
  int total_size = 0;

  // repeated .g3rc.PropertySerialized properties_get = 1;
  total_size += 1 * this->properties_get_size();
  for (int i = 0; i < this->properties_get_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties_get(i));
  }

  // repeated .g3rc.PropertySerialized properties_set = 2;
  total_size += 1 * this->properties_set_size();
  for (int i = 0; i < this->properties_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties_set(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyResponse*>(&from));
}

void PropertyResponse::MergeFrom(const PropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_get_.MergeFrom(from.properties_get_);
  properties_set_.MergeFrom(from.properties_set_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropertyResponse::CopyFrom(const PropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->properties_get())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->properties_set())) return false;
  return true;
}

void PropertyResponse::Swap(PropertyResponse* other) {
  if (other != this) {
    properties_get_.Swap(&other->properties_get_);
    properties_set_.Swap(&other->properties_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertyResponse::GetTypeName() const {
  return "g3rc.PropertyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kTranslationFieldNumber;
const int Position::kScaleFieldNumber;
const int Position::kRotationFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.Position)
}

void Position::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  translation_ = const_cast< ::g3rc::Vector*>(
      ::g3rc::Vector::internal_default_instance());
#else
  translation_ = const_cast< ::g3rc::Vector*>(&::g3rc::Vector::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scale_ = const_cast< ::g3rc::Vector*>(
      ::g3rc::Vector::internal_default_instance());
#else
  scale_ = const_cast< ::g3rc::Vector*>(&::g3rc::Vector::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rotation_ = const_cast< ::g3rc::EulerAngles*>(
      ::g3rc::EulerAngles::internal_default_instance());
#else
  rotation_ = const_cast< ::g3rc::EulerAngles*>(&::g3rc::EulerAngles::default_instance());
#endif
}

Position::Position(const Position& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  scale_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:g3rc.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete translation_;
    delete scale_;
    delete rotation_;
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Position& Position::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::g3rc::Vector::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::g3rc::Vector::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::g3rc::EulerAngles::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .g3rc.Vector translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scale;
        break;
      }

      // required .g3rc.Vector scale = 2;
      case 2: {
        if (tag == 18) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }

      // required .g3rc.EulerAngles rotation = 3;
      case 3: {
        if (tag == 26) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.Position)
  // required .g3rc.Vector translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->translation(), output);
  }

  // required .g3rc.Vector scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->scale(), output);
  }

  // required .g3rc.EulerAngles rotation = 3;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rotation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.Position)
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .g3rc.Vector translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // required .g3rc.Vector scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required .g3rc.EulerAngles rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Position*>(&from));
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::g3rc::Vector::MergeFrom(from.translation());
    }
    if (from.has_scale()) {
      mutable_scale()->::g3rc::Vector::MergeFrom(from.scale());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::g3rc::EulerAngles::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_translation()) {
    if (!this->translation().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(translation_, other->translation_);
    std::swap(scale_, other->scale_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Position::GetTypeName() const {
  return "g3rc.Position";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:g3rc.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector& Vector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.Vector)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.Vector)
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector*>(&from));
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector::GetTypeName() const {
  return "g3rc.Vector";
}


// ===================================================================

#ifndef _MSC_VER
const int EulerAngles::kYawFieldNumber;
const int EulerAngles::kPitchFieldNumber;
const int EulerAngles::kRollFieldNumber;
#endif  // !_MSC_VER

EulerAngles::EulerAngles()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.EulerAngles)
}

void EulerAngles::InitAsDefaultInstance() {
}

EulerAngles::EulerAngles(const EulerAngles& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.EulerAngles)
}

void EulerAngles::SharedCtor() {
  _cached_size_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EulerAngles::~EulerAngles() {
  // @@protoc_insertion_point(destructor:g3rc.EulerAngles)
  SharedDtor();
}

void EulerAngles::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EulerAngles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EulerAngles& EulerAngles::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

EulerAngles* EulerAngles::default_instance_ = NULL;

EulerAngles* EulerAngles::New() const {
  return new EulerAngles;
}

void EulerAngles::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EulerAngles*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(yaw_, roll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EulerAngles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.EulerAngles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float yaw = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (tag == 21) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // required float roll = 3;
      case 3: {
        if (tag == 29) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.EulerAngles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.EulerAngles)
  return false;
#undef DO_
}

void EulerAngles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.EulerAngles)
  // required float yaw = 1;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->yaw(), output);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // required float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.EulerAngles)
}

int EulerAngles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float yaw = 1;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required float pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EulerAngles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EulerAngles*>(&from));
}

void EulerAngles::MergeFrom(const EulerAngles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EulerAngles::CopyFrom(const EulerAngles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EulerAngles::Swap(EulerAngles* other) {
  if (other != this) {
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EulerAngles::GetTypeName() const {
  return "g3rc.EulerAngles";
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyIdentifier::kPropertySetFieldNumber;
const int PropertyIdentifier::kPropertyFieldNumber;
#endif  // !_MSC_VER

PropertyIdentifier::PropertyIdentifier()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.PropertyIdentifier)
}

void PropertyIdentifier::InitAsDefaultInstance() {
}

PropertyIdentifier::PropertyIdentifier(const PropertyIdentifier& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.PropertyIdentifier)
}

void PropertyIdentifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  property_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyIdentifier::~PropertyIdentifier() {
  // @@protoc_insertion_point(destructor:g3rc.PropertyIdentifier)
  SharedDtor();
}

void PropertyIdentifier::SharedDtor() {
  if (property_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_set_;
  }
  if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropertyIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyIdentifier& PropertyIdentifier::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

PropertyIdentifier* PropertyIdentifier::default_instance_ = NULL;

PropertyIdentifier* PropertyIdentifier::New() const {
  return new PropertyIdentifier;
}

void PropertyIdentifier::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_property_set()) {
      if (property_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        property_set_->clear();
      }
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        property_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropertyIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.PropertyIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string property_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }

      // optional string property = 2;
      case 2: {
        if (tag == 18) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.PropertyIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.PropertyIdentifier)
  return false;
#undef DO_
}

void PropertyIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.PropertyIdentifier)
  // optional string property_set = 1;
  if (has_property_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property_set(), output);
  }

  // optional string property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->property(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.PropertyIdentifier)
}

int PropertyIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string property_set = 1;
    if (has_property_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property_set());
    }

    // optional string property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyIdentifier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyIdentifier*>(&from));
}

void PropertyIdentifier::MergeFrom(const PropertyIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_set()) {
      set_property_set(from.property_set());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropertyIdentifier::CopyFrom(const PropertyIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyIdentifier::IsInitialized() const {

  return true;
}

void PropertyIdentifier::Swap(PropertyIdentifier* other) {
  if (other != this) {
    std::swap(property_set_, other->property_set_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertyIdentifier::GetTypeName() const {
  return "g3rc.PropertyIdentifier";
}


// ===================================================================

#ifndef _MSC_VER
const int PropertySerialized::kIdentifierFieldNumber;
const int PropertySerialized::kDataFieldNumber;
#endif  // !_MSC_VER

PropertySerialized::PropertySerialized()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:g3rc.PropertySerialized)
}

void PropertySerialized::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  identifier_ = const_cast< ::g3rc::PropertyIdentifier*>(
      ::g3rc::PropertyIdentifier::internal_default_instance());
#else
  identifier_ = const_cast< ::g3rc::PropertyIdentifier*>(&::g3rc::PropertyIdentifier::default_instance());
#endif
}

PropertySerialized::PropertySerialized(const PropertySerialized& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:g3rc.PropertySerialized)
}

void PropertySerialized::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identifier_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertySerialized::~PropertySerialized() {
  // @@protoc_insertion_point(destructor:g3rc.PropertySerialized)
  SharedDtor();
}

void PropertySerialized::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete identifier_;
  }
}

void PropertySerialized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertySerialized& PropertySerialized::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_g3rc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_g3rc_2eproto();
#endif
  return *default_instance_;
}

PropertySerialized* PropertySerialized::default_instance_ = NULL;

PropertySerialized* PropertySerialized::New() const {
  return new PropertySerialized;
}

void PropertySerialized::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_identifier()) {
      if (identifier_ != NULL) identifier_->::g3rc::PropertyIdentifier::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropertySerialized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:g3rc.PropertySerialized)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .g3rc.PropertyIdentifier identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:g3rc.PropertySerialized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:g3rc.PropertySerialized)
  return false;
#undef DO_
}

void PropertySerialized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:g3rc.PropertySerialized)
  // required .g3rc.PropertyIdentifier identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->identifier(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:g3rc.PropertySerialized)
}

int PropertySerialized::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .g3rc.PropertyIdentifier identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identifier());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertySerialized::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertySerialized*>(&from));
}

void PropertySerialized::MergeFrom(const PropertySerialized& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      mutable_identifier()->::g3rc::PropertyIdentifier::MergeFrom(from.identifier());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropertySerialized::CopyFrom(const PropertySerialized& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertySerialized::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PropertySerialized::Swap(PropertySerialized* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertySerialized::GetTypeName() const {
  return "g3rc.PropertySerialized";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace g3rc

// @@protoc_insertion_point(global_scope)
